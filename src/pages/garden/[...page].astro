---
import MarkdownIt from 'markdown-it';
import wikiLinks from 'markdown-it-wikilinks';
import copyCodeBlock from 'markdown-it-code-copy';
import markdownItAnchor from 'markdown-it-anchor';
import MainLayout from '../../layouts/MainLayout.astro';
import markdownItAttrs from 'markdown-it-attrs';

import {
  findInGraph,
  getNodesFromLinks,
  pagePath,
  urlParser,
} from '../../utils/pageFilters';
import Graph from '../../components/Graph.svelte';
import { Vault } from '../../utils/vault';

export async function getStaticPaths() {
  const notes = await Astro.glob('../../../content/**/*.md');
  const vault = new Vault(notes);

  return vault.filteredNotes.map(({ page, title, text, links }) => {
    return {
      params: { page },
      props: { title, text, links },
    };
  });
}

const { title, text, links } = Astro.props;

const { nodes, nodeLinks } = getNodesFromLinks(
  links.outGoingLinks,
  links.backLinks
);

const wikiOptions = {
  baseURL: '/garden/',
  makeAllLinksAbsolute: true,
  uriSuffix: '/',
  htmlAttributes: {
    class: 'text-red-600',
  },
};

const md = new MarkdownIt({
  html: true,
  breaks: true,
})
  .use(wikiLinks(wikiOptions))
  .use(copyCodeBlock)
  .use(markdownItAttrs)
  .use(markdownItAnchor);

let result = md.render(text);
---

<MainLayout title={title}>
  <h1 class="text-3xl font-semibold">{title}</h1>
  <div set:html={result}></div>
  <Graph
    nodes={nodes}
    links={nodeLinks}
    height={320}
    width={320}
    client:visible
  />
</MainLayout>

<style is:global>
  h1,
  h2,
  h3 {
    margin: 2rem 0 0;
    color: #b8c6e9;
    font-size: 1.75rem;
    cursor: pointer;
    font: 600;
  }
  p {
    line-height: 1.5em;
    margin-block-start: 1em;
    margin-block-end: 1em;
  }
</style>
